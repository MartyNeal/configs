;;racket
(require 'scheme)
(setq scheme-program-name "racket")
(put 'for 'scheme-indent-function 1)
(put 'for/list 'scheme-indent-function 1)
(put 'for/vector 'scheme-indent-function 1)
(put 'for/hash 'scheme-indent-function 1)
(put 'for/hasheq 'scheme-indent-function 1)
(put 'for/hasheqv 'scheme-indent-function 1)
(put 'for/and 'scheme-indent-function 1)
(put 'for/or 'scheme-indent-function 1)
(put 'for/sum 'scheme-indent-function 1)
(put 'for/product 'scheme-indent-function 1)
(put 'for/lists 'scheme-indent-function 1)
(put 'for/first 'scheme-indent-function 1)
(put 'for/last 'scheme-indent-function 1)
(put 'for/fold 'scheme-indent-function 2)
(put 'for* 'scheme-indent-function 1)
(put 'for*/list 'scheme-indent-function 1)
(put 'for*/vector 'scheme-indent-function 1)
(put 'for*/hash 'scheme-indent-function 1)
(put 'for*/hasheq 'scheme-indent-function 1)
(put 'for*/hasheqv 'scheme-indent-function 1)
(put 'for*/and 'scheme-indent-function 1)
(put 'for*/or 'scheme-indent-function 1)
(put 'for*/sum 'scheme-indent-function 1)
(put 'for*/product 'scheme-indent-function 1)
(put 'for*/lists 'scheme-indent-function 1)
(put 'for*/first 'scheme-indent-function 1)
(put 'for*/last 'scheme-indent-function 1)
(put 'for*/fold 'scheme-indent-function 2)
(put 'let/ec 'scheme-indent-function 1)

(defun scheme-compile-current-file ()
  "Compile a Scheme file FILE-NAME in the inferior Scheme process."
  (interactive)
  (insert " ") ;add and remove space to resave buffer for enter! to reload module
  (delete-backward-char 1)
  (save-buffer)
  (comint-send-string (scheme-proc) (concat "(enter! \""
                                            (buffer-name)
                                            "\" #:quiet\)\n")))
(define-key scheme-mode-map (kbd "<f5>") 'scheme-compile-current-file)
(define-key scheme-mode-map (kbd "C-c C-f") 'scheme-compile-current-file)

(defun run-racket ()
  (run-scheme "racket")
  (split-window-horizontally 70)
  (switch-to-buffer "*scratch*"))
