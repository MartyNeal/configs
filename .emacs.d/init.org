* Preface
This is where my emacs configuration lives.  It's using the literate
programming technique that all the new kids are using these days
whereby this init.org file gets tangled into the [[./init.el][init.el]] file which is
loaded on startup by emacs.  Doing this allows for org structuring and
folding and exporting to different formats.  It also allows for
extended commentary that might not be appropriate as source code
comments.  Code that I want to be tangled into the [[./init.el][init.el]] file goes
inside of source blocks like this

#+BEGIN_SRC emacs-lisp :tangle yes
;;This is an autogenerated file from init.org.  Don't edit this file
#+END_SRC

then doing ~(org-babel-tangle)~ will extract all source blocks from this
file and put them in [[./init.el][init.el]].  Note, that this file has an
~after-save-hook~ local variable set at the bottom of this file that
will do this automatically on save.

* Package.el
Package.el requires that (package-initialize) come near the top, so first it
comes.  It may be commented out, just not removed.
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

* Registers
I like my register settings (particularly the link to init.el and
init.org) to be at the top of the file, so that when something goes
wrong during setup, this will have already been run, and getting to
the file to fix the problem is easier.  It also helps because I have
my ~emacs.d~ folder mounted to different locations on the different
machines that I use, and this way I don't have to remember the path,
it's always just a ~C-x r j 9~ away

#+BEGIN_SRC emacs-lisp :tangle yes
  (set-register ?0 '(file . "~/.emacs.d/init.el"))
  (set-register ?1 '(file . "~/notes.org"))
  (set-register ?2 '(file . "~/todo.org"))
  (set-register ?3 '(file . "~/.bashrc"))
  (set-register ?9 '(file . "~/.emacs.d/init.org"))
#+END_SRC

* About me
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq user-full-name "Marty Neal"
        user-mail-address "marty.neal@gmail.com"
        twitter "@MartySNeal")
#+END_SRC

* Top level stuff
Add site-lisp and subdirectories to load-path.  Also setup exec path
to pick up diff, ssh, and other like-minded *nix utilities that emacs
needs access to.

#+BEGIN_SRC emacs-lisp :tangle yes
  (let ((default-directory (concat user-emacs-directory (convert-standard-filename "site-lisp/"))))
    (normal-top-level-add-subdirs-to-load-path))
  (add-to-list 'load-path (concat user-emacs-directory (convert-standard-filename "snippets/")))
  (add-to-list 'exec-path "/cygdrive/c/cygwin/bin")
  (add-to-list 'exec-path "~/.sdkman/candidates/groovy/2.5.0/bin")
  (add-to-list 'exec-path "C:/cygwin/home/marty/.sdkman/candidates/groovy/current/bin")
#+END_SRC

* [[https://github.com/jwiegley/use-package/][Use-package]] 
Too bad we can't use ~use-package~ to install ~use-package~.
Soon, ~use-package~ will be installed into emacs-core, at which point, 
Most of this goes away.

#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
;    (defvar package-contents-refreshed)
;    (unless (boundp package-contents-refreshed)
      (package-refresh-contents)
;      (setq package-contents-refreshed t))
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))
  (setq use-package-always-ensure t)

;; keeps things up-to-date
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+END_SRC

* Settings
** Appearance
*** Startup
Get rid of the fluff and things to protect/educate new emacs users.
Also, I learned something.  ~inhibit-splash-screen~ and
~inhibit-startup-message~ are both just aliases for
~inhibit-startup-screen~, so you only need the one.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (setq inhibit-startup-screen t
         initial-scratch-message nil
         disabled-command-function nil
         visible-bell t)
   ;(when (display-graphic-p)
     (set-fringe-mode 0)
     (menu-bar-mode 0)
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
     (blink-cursor-mode 0)
   ;)
 #+END_SRC

*** TODO Make custom startup buffer
    I would like to figure out how to make a really nice startup buffer
    that displays a svg clock, quote of the day, background image, task
    list, and list of bookmarks.  Similar to Momentum for Chrome.

*** Themes
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package zenburn-theme
    :config 
    (load-theme 'zenburn t)
    (add-to-list 'default-frame-alist '(font . "Hasklig-11"))
    ;(add-to-list 'default-frame-alist '(font . "iosevka-11"))
    ;(set-frame-font "iosevka-13" nil t)
    ;(set-frame-font "Hasklig-11" nil t)
    ;(set-frame-font "Consolas-11" nil t)
    ;(set-frame-font "Monoid-11" nil t) 
    ;(set-frame-font "System" nil t) 
    ;(set-frame-font "Firacode-11" nil t)
  )

  (use-package pretty-mode
  :config
  (global-pretty-mode)
  (pretty-activate-groups '(:sub-and-superscripts :greek :arithmetic-nary))
  (setq scad-mode-hook nil)
  (add-hook
    'scad-mode-hook
    (lambda ()
      (mapc (lambda (pair) (push pair prettify-symbols-alist))
         '(
;           (""          . #x)
;           ("sphere"    . #x1F3B1)
;           ("cube"      . #x25FB)
;           ("cylindar"  . #x26AA)
           ("translate" . ↗)
           ("rotate"    . ↻)
           ("union"     . ∪)
           ))))
)

#+END_SRC

**** TODO Listing fonts 
Add some discussion here about how to go about listing fonts that are
installed and available for emacs to use, and how to preview it using
the hello file

*** Scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq hscroll-margin 1
        scroll-conservatively 1
        scroll-preserve-screen-position t)
#+END_SRC

*** Mouse
    Yank where the cursor is at, not where you clicked inside the buffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mouse-yank-at-point t)
#+END_SRC

*** Browsing
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe")
  ;   browse-url-generic-program "xdg-open")
#+END_SRC

*** Tabs/Spaces/Newlines
#+BEGIN_SRC emacs-lisp :tangle yes
  (set-default 'truncate-lines t)
  (set-default 'tab-width 4)
  (set-default 'indent-tabs-mode nil)
  (setq require-final-newline t)
#+END_SRC

*** Frames and Minibuffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq frame-title-format nil);'("%f" (dired-directory dired-directory "%b")))
  (setq ns-use-proxy-icon nil)
  (column-number-mode)
  (display-time-mode)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (set-frame-parameter (selected-frame) 'alpha '(92))
  (add-to-list 'default-frame-alist '(alpha . (92)))
#+END_SRC
*** Shell
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq shell-file-name "C:\\cygwin\\bin\\bash")
;  (setq shell-file-name "/usr/bin/bash")
  (setq display-buffer-alist
      '(("^\\*shell\\*$" . ((lambda (buffer alist)
                              (with-current-buffer buffer
                                (buffer-face-set '(:background "grey6"))))))))
#+END_SRC

*** Tramp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tramp
    :config
    (setq tramp-default-method "ssh")
    (add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt))
  (use-package dbus)
#+END_SRC

*** Proced
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq proced-auto-update-interval 1)
#+END_SRC
*** Pretty-up things
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-prettify-symbols-mode)
  (global-font-lock-mode)
  (global-hi-lock-mode)
  (show-paren-mode)
#+END_SRC

*** Mail
#+BEGIN_SRC emacs-lisp :tangle yes
(setq gnus-select-method
      '(nnimap "gmail"
	       (nnimap-address "imap.gmail.com")
	       (nnimap-server-port "imaps")
	       (nnimap-stream ssl)))

(setq send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-stream-type 'starttls
      smtpmail-smtp-user "marty.neal@gmail.com"
      smtpmail-smtp-service 587)
#+END_SRC

*** [[http://github.com/milkypostman/powerline/][Powerline]]
A hand tuned powerline appearance that I like.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package powerline
    :config
    (setq powerline-default-separator 'contour)
    (setq-default mode-line-format '("%e"
      (:eval
       (let* ((active (powerline-selected-window-active))
              (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
              (mode-line (if active 'mode-line 'mode-line-inactive))
              (face1 (if active 'powerline-active1 'powerline-inactive1))
              (separator (intern (format "powerline-%s-%s"
                                         (powerline-current-separator)
                                         (car powerline-default-separator-dir))))
                    (lhs (list ; left hand side
                          (powerline-raw "%*" face1 'l) ;modified/readonly
                          (funcall separator face1 mode-line)
                          (powerline-raw "%b" mode-line-buffer-id 'l) ;buffer name
                          (funcall separator mode-line face1)
                          (powerline-raw "%n" face1 'l) ;major mode
                          (powerline-major-mode face1 'l)))
                    (rhs (list ; right hand side
;                          (powerline-minor-modes face1 'r) ;minor modes
                          (funcall separator face1 mode-line)
                          (powerline-raw global-mode-string mode-line 'r) ;rest
                          (powerline-raw "L%4l:C%3c" mode-line 'r) ;line and column
                          (funcall separator mode-line face1)
                          (powerline-raw "%I %7p" face1 'r)))) ;buffersize and percentage from top
               (concat
                (powerline-render lhs)
                (powerline-fill face1 (powerline-width rhs))
                (powerline-render rhs)))))))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package powerline
    :config
    (setq powerline-default-separator 'contour)
    (setq-default mode-line-format '("%e"
      (:eval
       (let* ((active (powerline-selected-window-active))
              (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
              (mode-line (if active 'mode-line 'mode-line-inactive))
              (face1 (if active 'powerline-active1 'powerline-inactive1))
              (separator (intern (format "powerline-%s-%s"
                                         (powerline-current-separator)
                                         (car powerline-default-separator-dir))))
                    (lhs (list ; left hand side
                          (powerline-raw "%* %n" face1 'l) ;modified/readonly and major mode
                          (powerline-major-mode face1 'l)
                          (powerline-raw " " face1 'r)))
                    (center (list
                          
                          (powerline-raw "%b" mode-line-buffer-id 'l))) ;buffer name
                    (rhs (list ; right hand side
                          (funcall separator mode-line face1)
                          (powerline-raw " " face1 'r) ;line and column
                          (powerline-raw global-mode-string face1 'r) ;rest
                          (powerline-raw "L%4l:C%3c" face1 'r) ;line and column
                          (funcall separator face1 mode-line)
                          (powerline-raw " %I %7p" mode-line 'r)))) ;buffersize and percentage from top
                 (concat 
                  (powerline-render lhs)
			      (powerline-fill-center face1 (/ (powerline-width center) 2.0))
                  (powerline-render (list (funcall separator face1 mode-line)))
			      (powerline-fill-center mode-line (powerline-width center))
			      (powerline-render center)
			      (powerline-fill mode-line (powerline-width rhs))
			      (powerline-render rhs)))))))
#+END_SRC
** Backups
https://www.emacswiki.org/emacs/BackupDirectory
#+BEGIN_QUOTE
By default Emacs saves BackupFiles under the original name with a
tilde `~’ appended. This is primitive and boring. Civilized people
want to version their backups and organize it so that backups are not
laced out through their harddrive, but rather organized into specific
backup directories. This can be done in a few different ways.
#+END_QUOTE

 #+BEGIN_SRC emacs-lisp :tangle yes
 (setq
   backup-by-copying t                             ; don't clobber symlinks
   backup-directory-alist '(("." . "~/.backups"))    ; don't litter my fs tree
   auto-save-file-name-transforms '((".*" "~/.backups" t))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)                              ; use versioned backups
 #+END_SRC

* Misc functions
 #+BEGIN_SRC emacs-lisp :tangle yes
(defun isearch-exit-other-end (rbeg rend)
    "Exit isearch, but at the other end of the search string."
    (interactive "r")
    (isearch-exit)
    (goto-char isearch-other-end))

(defun isearch-current-word ()
  "ISearch forward for word starting at point.  Similar to 'C-s C-w' but doesn't halt macro"
  (interactive)
  (isearch-forward nil 1)
  (isearch-yank-word))
 #+END_SRC

* Key bindings
** Regular bindings
https://stackoverflow.com/a/2253044
#+BEGIN_SRC emacs-lisp :tangle yes
;https://stackoverflow.com/a/2253044
(keyboard-translate ?\C-i ?\H-i)
(keyboard-translate ?\C-m ?\H-m)
  (bind-keys*
    ("<f1>" . man)
    ("<f5>" . revert-buffer)
    ("C-x f" . find-file)
    ("C-x M-SPC" . delete-blank-lines)
    ("<C-wheel-up>" . (lambda () (interactive) (text-scale-increase 1)))
    ("<C-wheel-down>" . (lambda () (interactive) (text-scale-decrease 1)))
    ([M-up] . (lambda () (interactive) (transpose-lines 1) (forward-line -2)))
    ([M-down] . (lambda () (interactive) (forward-line 1) (transpose-lines 1) (forward-line -1)))
    ("C-x w w" . (lambda () (interactive)(highlight-regexp (thing-at-point 'symbol))))
    ("M-g" . goto-line)
    ("M-Q" . (lambda () (interactive) (let ((fill-column (point-max))) (fill-paragraph))))
    ("C-c j" . (lambda () (interactive)
      (shell-command-on-region (mark) (point) "jq ." (buffer-name) t)
      (replace-string "
" "" nil (mark) (point))))
    ("C-c s" . (lambda () (interactive)
      (shell-command-on-region (mark) (point) "sqlformat -k upper -i lower -r -" (buffer-name) t)
      (replace-string "
" "" nil (mark) (point))))
    ("C-c x" . (lambda () (interactive)
      (shell-command-on-region (mark) (point) "xmlstarlet format -" (buffer-name) t)
      (replace-string "
" "" nil (mark) (point))))
    ("C-c c" . (lambda () (interactive)
      (shell-command-on-region (mark) (point) "csscomb" (buffer-name) t)
      (replace-string "
" "" nil (mark) (point))))
    ("C-S-i" . (lambda () (interactive) (let ((current-prefix-arg -1)) (call-interactively 'other-window))))
    ([?\H-i] . other-window)
    ("C-." . isearch-current-word)
    ("<C-M-backspace>" . kill-emacs)
    :map isearch-mode-map
    ("<C-return>" . isearch-exit-other-end)
    )

#+END_SRC

** [[https://github.com/myuhe/smartrep.el][Smartrep]]
This package allows for repeating keystrokes without their prefix
keys.  So for example, C-x o o o o... will cycle through other windows

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartrep
    :config
    (setq smartrep-mode-line-active-bg nil)
    (smartrep-define-key global-map "C-x"
      '(("{" . shrink-window-horizontally)
        ("}" . enlarge-window-horizontally)))
    (smartrep-define-key global-map "C-x" '(("o" . other-window)))
    (smartrep-define-key global-map "C-x" '(("k" . (kill-buffer (current-buffer))))))
#+END_SRC

* [[https://emacs-helm.github.io/helm/][Helm]]
Helm is an Emacs incremental and narrowing framework.  I haven't
really compared this to ivy or ido, I tried helm first, and liked it.
One day maybe I'll make a more informed decision.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
        :init
        (use-package projectile)
        (use-package helm-projectile)
        (use-package helm-ag)
        :bind (
          ("C-x C-f" . helm-mini)
          ("M-x" . helm-M-x)
          :map helm-map
          ([tab] . helm-execute-persistent-action)
          ("C-z" . helm-select-action))
        :config
        (setq helm-move-to-line-cycle-in-source t
              helm-locate-command "locate %s -Air %s"
              helm-mini-default-sources '(helm-source-buffers-list 
                                          helm-source-recentf    
                                          helm-source-files-in-current-dir 
                                          helm-source-file-cache
;                                          helm-source-projectile-files-list
                                          helm-source-locate))
        (helm-mode)
        (set-face-attribute 'helm-selection nil :box t)
        (add-to-list 'helm-completing-read-handlers-alist
                     '(execute-extended-command . nil)))
#+END_SRC

* [[http://github.com/rolandwalker/unicode-fonts][Unicode-fonts]]
utf-8 has become the defacto standard character encoding.  Nothing
else exists. lalalala.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package persistent-soft) ; make unicode-fonts use a cache which speeds things up
  (use-package unicode-fonts
    :init
    (prefer-coding-system 'utf-8-unix)
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8-unix)
    (set-keyboard-coding-system 'utf-8-unix)
    (set-selection-coding-system 'utf-8-unix)
    (set-terminal-coding-system 'utf-8-unix)
    (setq locale-coding-system 'utf-8-unix)
    (setq-default buffer-file-coding-system 'utf-8-unix)
    :config 
    (unicode-fonts-setup))
#+END_SRC

* [[https://github.com/alpaker/Fill-Column-Indicator][Fill-column-indicator]]
Graphically indicate the fill column with a thin line down the right side

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fill-column-indicator
    :config 
    (setq fci-rule-column 120)
    (setq fill-column 80))
#+END_SRC

* [[http://elpa.gnu.org/packages/chess.html][Chess]]
I'm a chess player, of course I need to tell emacs how to play chess!
I have noticed a bit of weird behavoir when playing stockfish from
emacs though.  It seems like SF makes terrible moves after about 5
minutes into the game and after a long think.  If you take back a move
though ~C-c C-t~, then make the move again, it makes a much stronger
move.  

Handy keystrokes
 - ~M-w~::To copy a fen
 - ~C-0 M-w~::To copy a pgn
 - To paste into SCID (from SCID), ~C-S-I~, ~C-v~, ~M-i~, Esc

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package chess
    :preface
    (defun chess-scid ()
      (interactive)
      (let ((file (make-temp-file "emacs-chess-game-" nil ".pgn"))
            (game chess-module-game))
        (with-temp-buffer
          (chess-game-to-pgn game)
          (write-file file))
        (thread-last file
          (replace-regexp-in-string "/cygdrive/c/" "C:\\\\")
          (replace-regexp-in-string "/" "\\\\")
          (call-process "/cygdrive/c/Program Files/Scid-4.4/bin/scid.exe" nil 0 nil))))
    (defun chess-fics ()
      "Sets the username and password on login"
      (interactive)
      (require 'passwords)
      (defvar fics-password)
      (chess-ics "freechess.org" 5000 "cheeseheadtothe" fics-password))
    :commands (list chess chess-fics)
    :bind (:map chess-display-mode-map ("C-c C-s" . chess-scid))
    :config
    (setq
     chess-default-engine '(chess-stockfish chess-phalanx)
     chess-display-highlight-legal nil
     chess-images-default-size 64
     chess-stockfish-path "/cygdrive/c/Program Files/Scid-4.4/bin/engines/stockfish.exe")
    (load "~/.emacs.d/elpa/chess-2.0.4/chess-pgn.elc")
    (advice-add 'chess :after
                (lambda (&rest r)
                  (set-frame-size (selected-frame) 67 35)
                  (scroll-bar-mode 0))))
#+END_SRC

* [[http://nic-nac-project.net/~necui/ht.html][Highlight-tail]]
This is a fun little package that leaves a color trail as you type.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package highlight-tail
   :defer 3
   :config
   (setq highlight-tail-colors '(
     ("grey32" . 0)
     ("grey24" . 18)
    ))
    (highlight-tail-mode))
#+END_SRC

* [[file:~/.emacs.d/site-lisp/teletype.el][teletype]]
Also a fun little package that types text into a buffer at a steady rate

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package teletype
    :load-path "site-lisp/"
)
#+END_SRC

* [[https://github.com/jwiegley/use-package][Rotate]]
There are lots of times when ediff, or helm, or some other package
doesn't correctly guess my mood for how I want my windows split.  It's
handy to have a key stroke to easily flip things around.  I used to
have single purpose function that would toggle an exact 2 window split
between vertical and horizontal, but then I found this package which
is much more generic.  ~rotate-layout~ will rotate through different
split orientations, while ~rotate-window~ will change which buffers
appear in which windows

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rotate
    :config
    (smartrep-define-key global-map "C-|"
    '(("w" . rotate-window)
      ("l" . rotate-layout))))
#+END_SRC

* [[http://www.dr-qubit.org/Emacs_Undo_Tree_package.html][Undo-tree]]
~C-x u~ pops up an "undo tree", which you can navigate with ~n~, and ~p~.
Use ~s~ to prevent the original buffer from updating as you navigate.
Use ~t~ to add timestamps to the tree.  Use ~d~ to bring up a diff window
between the selected version and the highlighted version.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-tree
  :config (global-undo-tree-mode))
#+END_SRC
* [[https://github.com/syohex/emacs-anzu][Anzu]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package anzu
  :config
    (global-anzu-mode)
    (anzu-mode +1)
  :bind 
    ("M-%" . anzu-query-replace)
    ("C-M-%" . anzu-query-replace-regexp)
    ("<f2>" . anzu-replace-at-cursor-thing)
)
#+END_SRC

* [[https://github.com/auto-complete/auto-complete][Auto complete]]
 - TODO Try to use the more powerful and modern company-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-complete
    :defer 10
    :config (ac-config-default))
#+END_SRC

* [[http://github.com/capitaomorte/yasnippet][Yasnippet]]
I should really make better use of this package
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
     :defer 20
     :config 
     (yas-global-mode)
     (setq yas-prompt-functions '(yas-completing-prompt)))
#+END_SRC

* [[https://github.com/zenozeng/yafolding.el][Yafolding]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yafolding)
#+END_SRC

* [[http://github.com/rolandwalker/anaphora][Anaphora]]
This enables the use of anaphoric macros such as ~aif~ and ~alambda~ etc.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package anaphora)
#+END_SRC

* [[https://github.com/magnars/dash.el][Dash]]
Make elisp better
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dash)
  (use-package dash-functional)
#+END_SRC

* [[https://github.com/magnars/multiple-cursors.el][Multiple-cursors]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
  :config
    (global-unset-key (kbd "C-<down-mouse-1>"))
  :bind
    ("C-<mouse-1>" . 'mc/add-cursor-on-click))

#+END_SRC

* [[https://github.com/mpasternacki/chef-mode][Chef-mode]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package chef-mode
    :preface
      (defun keff ()
        (interactive)
        (message (concat "knife environment from file " (buffer-name)))
        (set-process-filter
          (start-process "keff" "*knife results*" "knife" "environment" "from" "file" (buffer-name))
          (lambda (_ output) (message output))))
    :mode (("chef\\-repo/environments/.*\\.json\\'" . chef-mode))
    :load-path "/cygdrive/c/opscode/chef/embedded/bin"
    :bind (:map chef-mode-map
      ("C-c C-c" . keff)))
#+END_SRC

* [[https://github.com/magnars/expand-region.el][Expand-region]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
    :bind ("C-M-w" . er/expand-region)) ; despite Magnar's advice ;-)
#+END_SRC

* [[https://github.com/yuya373/emacs-slack][Slack
]]
I've tried this out and gotten this working, but actually prefer the
native slack client

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package slack
    :commands 'slack-start
    :config
    (require 'passwords)
    (setq slack-buffer-emojify t)
    (setq slack-prefer-current-team t)
    (slack-register-team
     :name "emacs-slack"
     :default t
     :client-id slack-client-id
     :client-secret slack-client-secret
     :token slack-token
     :subscribed-channels '()))
#+END_SRC

* [[GitHub: https://github.com/dengste/minimap][Minimap]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package minimap
    :config
    (setq minimap-window-location 'right))
#+END_SRC

* [[https://github.com/emacsmirror/epoch-view/][Epoch-view]]
This nifty little package allows you to turn on epoch-view-mode which
will interpret 8-11 digit characters as timestamps and render it formatted as an ISO-8601 string
e.g. 123456789 => 1973-11-29 13:33:09

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package epoch-view
    :load-path "site-lisp/"
    :config
    (setq epoch-view-time-zone "UTC0")
    (setq epoch-view-time-format "%FT%T %Z")
)
#+END_SRC
* Languages
** [[https://github.com/greghendershott/racket-mode][Racket]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package racket-mode 
    :mode "\\.rkt$"
    :interpreter "racket")
#+END_SRC

** [[https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes][Groovy-mode]]
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package groovy-mode 
      :mode "\\.groovy"
      :interpreter "groovyclient"
      :config
      (require 'ob-groovy)
      (add-hook 'groovy-mode-hook (lambda () (fci-mode))))
    (use-package inf-groovy
      :config
      (setq groovysh "C:\\cygwin\\home\\marty\\.sdkman\\candidates\\groovy\\2.5.0\\bin\\groovysh")
    )
#+END_SRC

** [[http://ess.r-project.org][ESS (Emacs Speaks Statistics)]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ess
    :ensure nil
    :mode ("\\.r" . ess-mode)
    :interpreter "rterm.exe"
    :config 
      (require 'ess-r-mode))
#+END_SRC

** [[http://github.com/hvesalai/scala-mode2][Scala]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package scala-mode
    :mode "\\.scala"
    :interpreter "scala")
#+END_SRC

** C-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package cc-mode 
    :mode "\\.c"
    :config
    (add-hook 'c-mode-hook (lambda () (fci-mode))))
#+END_SRC
** [[https://github.com/pashky/restclient.el][Restclient]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package restclient
    :mode (("\\.http$" . restclient-mode)))
#+END_SRC

** [[http://lilypond.org/vc/old/gub.darcs/downloads/lilypond-HEAD/elisp/lilypond-mode.el][Lilypond]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lilypond-mode
    :disabled
    :load-path "site-lisp/lilypond/"
    :mode "\\.ly$"
    :config 
    (defun compile-ly ()
      (interactive)
      (save-buffer)
      (let ((pdf (concat (substring (buffer-name) 0 -3) ".pdf"))
            (ly (buffer-name)))
        (shell-command (concat "Lilypond.exe " ly))
     (when (get-buffer pdf) (kill-buffer pdf))
     (delete-other-windows)
     (find-file-other-window pdf)
     (find-file-other-window ly))))
#+END_SRC

** [[https://github.com/NicolasPetton/Indium][javascript]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package indium
    :mode "\\.js"
    :bind (:map js2-mode-map
      ("<C-return>" . indium-eval-region)
      ("C-c r" . indium-eval-region)
      ("C-c C-r" . indium-eval-region))
    :config 
      (use-package js2-refactor)
      (add-hook 'js-mode-hook #'indium-interaction-mode)
      (set-fringe-mode 10))
#+END_SRC

** [[https://github.com/cbbrowne/pg.el][Sql]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pg
  :preface
    (defun sql ()
      "Connects to a sql database"
      (interactive)
      (require 'passwords)
      (defvar sql-password)
      (call-interactively 'sql-connect))
  :config
  (setq sql-postgres-login-params
      '((user :default "postgres")
        (database :default "postgres")
        (server :default "localhost")
        (port :default 5432)))
  (add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
  (setq sql-connection-alist
      '((webar_marty (sql-product 'postgres)
                  (sql-port 5432)
                  (sql-server "localhost")
                  (sql-user "webar_admin")
                  (sql-password sql-password)
                  (sql-database "webar_marty"))
        (webar_integration (sql-product 'postgres)
                  (sql-port 5432)
                  (sql-server "localhost")
                  (sql-user "webar_admin")
                  (sql-password sql-password)
                  (sql-database "webar_integration"))
        (webar_ccp (sql-product 'postgres)
                  (sql-port 5432)
                  (sql-server "10.1.10.136")
                  (sql-user "webar_admin")
                  (sql-password sql-password)
                  (sql-database "webar_ccp"))
        (webar_ccp_joe (sql-product 'postgres)
                  (sql-port 5432)
                  (sql-server "10.1.10.71")
                  (sql-user "webar_admin")
                  (sql-password sql-password)
                  (sql-database "webar_ccp")))))

#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package ob-rust)
   (use-package rust-mode)
#+END_SRC
** OpenSCAD
#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package scad-mode)
   (use-package scad-preview)
#+END_SRC
* [[http://orgmode.org][Org]]
I could do so much more with org, but for now, just org-bullets and
org-journal are enough customization to make my life easier.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :preface
  (require 'ob-R)
  (require 'ob-async)
  (use-package ob-restclient)
  (defun my-org-clocktable-notodo (ipos tables params)
    "Removes TODO and DONE from headlines in org clocktables"
    (cl-loop for tbl in tables
             for entries = (nth 2 tbl)
             do (cl-loop for entry in entries
                         for headline = (nth 1 entry)
                         do (setq headline (replace-regexp-in-string "TODO \\|DONE " "" headline))
                         do (setcar (nthcdr 1 entry) headline)))
    (org-clocktable-write-default ipos tables params))

    :mode (("\\.org$" . org-mode))
    :config
    (setq org-agenda-files '(
      "/cygdrive/c/Users/nealm/notes.org" 
      "/cygdrive/c/Users/nealm/todo.org"))
    (setq org-pretty-entities t)

    ;; emacs can render things like *bold*, _italic_ and ~preformatted~
    ;; code and then hide the markers
    (setq org-hide-emphasis-markers t)
    (setq org-use-speed-commands t)
    (setq org-confirm-babel-evaluate nil)
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
    (add-hook 'org-mode-hook (lambda ()
      (push '("#+BEGIN_SRC" . ?✎) prettify-symbols-alist)
      (push '("#+END_SRC" . ?✎) prettify-symbols-alist)
      (global-prettify-symbols-mode)))
    (use-package htmlize)
    (use-package org-bullets
      :config
      (setq org-bullets-bullet-list (list "●" "○" "►" "•"))
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
    (use-package ox-reveal)
    (use-package org-journal
      :bind ("C-c C-j" . org-journal-new-entry))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (redis . t)
       (shell . t)
       (restclient .t)
       (R . t)
       (sql . t)
       (dot . t)
       (plantuml . t)
      ))
    (setq org-plantuml-jar-path
      (expand-file-name "C:/bin/plantuml.jar"))
    (set-face-attribute 'org-level-1 nil :height 1.3 :weight 'bold)
    (set-face-attribute 'org-level-2 nil :height 1.2)
    (set-face-attribute 'org-level-3 nil :height 1.1)
    (set-face-attribute 'org-todo nil :weight 'bold :box t)
    (setq jiralib-url "https://interprosecorp.atlassian.net")
    (setq unity-url "https://webtrends.jiveon.com")
    (setq zendesk-url "https://interprosehelp.zendesk.com")
;    (org-add-link-type "jira" (lambda (key) (org-open-link-from-string (concat jiralib-url "/browse/" key))))
    (org-add-link-type "unity" (lambda (key) (org-open-link-from-string (concat unity-url "/docs/" key))))
    (org-add-link-type "zendesk" (lambda (key) (org-open-link-from-string (concat unity-url "/hc/en-us/articles/" key))))
)
#+END_SRC
** org-use-speed-commands
This feature is cool enough to talk about on its own.  Basically, if
point is at the start of a heading, you can use a simplified keymap to
navigate and execute commands.  The list of commands can be discovered
by running ~(org-speed-command-help)~, or look below at the statically
generated list which may be out of date, or type ~?~ on a heading.
*** Outline Navigation
n   (org-speed-move-safe (quote org-next-visible-heading))
p   (org-speed-move-safe (quote org-previous-visible-heading))
f   (org-speed-move-safe (quote org-forward-heading-same-level))
b   (org-speed-move-safe (quote org-backward-heading-same-level))
F   org-next-block
B   org-previous-block
u   (org-speed-move-safe (quote outline-up-heading))
j   org-goto
g   (org-refile t)

*** Outline Visibility
c   org-cycle
C   org-shifttab
    org-display-outline-path
s   org-narrow-to-subtree
=   org-columns

*** Outline Structure Editing
U   org-metaup
D   org-metadown
r   org-metaright
l   org-metaleft
R   org-shiftmetaright
L   org-shiftmetaleft
i   (progn (forward-char 1) (call-interactively (quote org-insert-heading-respect-content)))
^   org-sort
w   org-refile
a   org-archive-subtree-default-with-confirmation
@   org-mark-subtree
#   org-toggle-comment

*** Clock Commands
I   org-clock-in
O   org-clock-out

*** Meta Data Editing
t   org-todo
,   (org-priority)
0   (org-priority 32)
1   (org-priority 65)
2   (org-priority 66)
3   (org-priority 67)
:   org-set-tags-command
e   org-set-effort
E   org-inc-effort
W   (lambda (m) (interactive "sMinutes before warning: ") (org-entry-put (point) "APPT_WARNTIME" m))

*** Agenda Views etc
v   org-agenda
/   org-sparse-tree

*** Misc
o   org-open-at-point
?   org-speed-command-help
<   (org-agenda-set-restriction-lock (quote subtree))
>   (org-agenda-remove-restriction-lock)

** ob-redis
The org bable redis package is broken as far as I can tell, because it
does not actually use the db arg that you provide.  Maybe it used to
work with an older version of redis-cli, but it doesn't with my
version. re-defun-ing seems to do the job.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ob-redis
    :load-path "site-lisp/"
    :preface
    (defun org-babel-execute:redis (body params)
      "org-babel redis hook."
      (let* ((db (or (cdr (assoc :db params)) ob-redis:default-db))
             (cmd (mapconcat 'identity (list "redis-cli -h" db) " ")))
        (replace-regexp-in-string "
" "" (org-babel-eval cmd body)))))
#+END_SRC

* Wanderlust
#+BEGIN_SRC emacs-lisp :tangle yes
;; wanderlust
(autoload 'wl "wl" "Wanderlust" t)
(autoload 'wl-other-frame "wl" "Wanderlust on new frame." t)
(autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)

;; IMAP
(setq elmo-imap4-default-server "imap.gmail.com")
(setq elmo-imap4-default-user "marty.neal@gmail.com")
(setq elmo-imap4-default-authenticate-type 'clear)
(setq elmo-imap4-default-port '993)
(setq elmo-imap4-default-stream-type 'ssl)

(setq elmo-imap4-use-modified-utf7 t)

;; SMTP
(setq wl-smtp-connection-type 'starttls)
(setq wl-smtp-posting-port 587)
(setq wl-smtp-authenticate-type "plain")
(setq wl-smtp-posting-user "marty.neal")
(setq wl-smtp-posting-server "smtp.gmail.com")
(setq wl-local-domain "gmail.com")

(setq wl-default-folder "%inbox")
(setq wl-default-spec "%")
(setq wl-draft-folder "%[Gmail]/Drafts")
(setq wl-trash-folder "%[Gmail]/Trash")
(setq wl-folder-check-async t)

(setq elmo-imap4-use-modified-utf7 t)

(autoload 'wl-user-agent-compose "wl-draft" nil t)
(if (boundp 'mail-user-agent)
    (setq mail-user-agent 'wl-user-agent))
(if (fboundp 'define-mail-user-agent)
    (define-mail-user-agent
      'wl-user-agent
      'wl-user-agent-compose
      'wl-draft-send
      'wl-draft-kill
      'mail-send-hook))
#+END_SRC

* Epilogue
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:
